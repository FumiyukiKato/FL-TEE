// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    trusted {
        /* define ECALLs here. */
        
        public sgx_status_t ecall_secure_aggregation(
            uint32_t id,
            uint32_t round,
            [in, count=client_size] uint32_t* client_ids,
            size_t client_size,
            [in, count=encrypted_parameters_size] uint8_t* encrypted_parameters_data,
            size_t encrypted_parameters_size,
            size_t num_of_parameters,
            size_t num_of_sparse_parameters,
            [out, count=num_of_parameters] float* updated_parameters_data,
            [out, count=3] float* execution_time_results
        );

        public sgx_status_t ecall_client_size_optimized_secure_aggregation(
            size_t optimal_num_of_clients,
            [user_check] uint8_t* encrypted_parameters_data_ptr,
            size_t num_of_parameters,
            size_t num_of_sparse_parameters,
            [in, count=client_size] uint32_t* client_ids,
            size_t client_size,
            float sigma,
            float clipping,
            float alpha,
            [out, count=num_of_parameters] float* updated_parameters_data,
            [out, count=3] float* execution_time_results,
            uint8_t verbose,
            uint8_t dp
        );

        public sgx_status_t ecall_fl_init(
            uint32_t id,
            [in, count=client_size] uint32_t* client_ids,
            size_t client_size,
            float sigma,
            float clipping,
            float alpha,
            float sampling_ratio,
            uint32_t aggregation_alg,
            uint8_t verbose,
            uint8_t dp
        );

        public sgx_status_t ecall_start_round(
            uint32_t id,
            uint32_t round,
            uint32_t sample_size,
            [out, count=sample_size] uint32_t* client_ids
        );
    };
    
    untrusted {
        sgx_status_t ocall_load_next_data(
            size_t current_cursor,
            [user_check] uint8_t* encrypted_parameters_data_ptr,
            [out, count=encrypted_parameters_size] uint8_t* encrypted_parameters_data,
            size_t encrypted_parameters_size
        );
    };
};
